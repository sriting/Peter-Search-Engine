20918
www.ics.uci.edu/~thornton/ics32/Schedule.html
ICS 32 Winter 2019, Schedule ICS 32 Winter 2019 | News | Course Reference | Schedule | Project Guide | Notes and Examples | Grade Calculator | About Alex ICS 32 Winter 2019 Schedule In lieu of a course textbook, assigned readings are mainly the Notes and Examples from lecture, which I'll try to keep posted ahead of where we are in lecture at any given time. It is a good idea to skim the assigned reading before the lecture for the main ideas, attend lecture, and then to go through the assigned reading again to fill in the details that you missed, both in your initial skim of the reading and in the lecture. Date Lecture Topics Readings Project Work Week 1 Tu 1/8 Course introduction What are software libraries? The value of abstraction Designing and writing larger programs Course Reference Front page of Project Guide N: Course Introduction Th 1/10 Files, revisited Exceptions and exception handling try statements try, except, else, and finally clauses in try statements N: Exceptions and Files F 1/11 Lab sections begin meeting today Project #0 due 11:59pm Optionally, choose a partner for Project #1 today Week 2 Tu 1/15 Higher-level file access File systems and related modules in Python's standard library Paths Recursive data structures File systems as a recursive data structure Recursive functions When recursion is — and is not — appropriate in Python N: Paths and File Systems N: Recursion Th 1/17 Overview of computer networks (briefly) Network input and output Some necessary background on how the Internet works IP addresses, ports, packets, routers, etc. Sockets A socket's input and output streams Servers and clients Using sockets in Python Bytes vs. strings (briefly) An example Python socket "echo" client Using "pseudo-file" objects to treat socket input/output as text N: Networks and Sockets Week 3 M 1/21 UNIVERSITY HOLIDAY: Martin Luther King Jr. Day — NO LABS TODAY Tu 1/22 Modules and the import statement Network protocols The importance of knowing who and what to trust Public and private functions in a module Implementing a custom text-based protocol in Python Revisiting the value of splitting complex functions into shorter, simpler ones N: Modules N: Protocols W 1/23 Project #1 due 11:59pm Optionally, choose a partner for Project #2 today Th 1/24 Implementing a custom text-based protocol in Python (continued) Namespaces and name resolution (briefly) More details about import and multiple modules Naming conventions for modules N: Modules N: Protocols Week 4 Tu 1/29 Why namedtuples are a limited way to create new kinds of objects Classes Objects and their attributes Constructors, initialization, methods, and the self parameter The difference between method calls and function calls Why we specify some parts of a class as public and others as private Naming conventions for classes N: Classes Th 1/31 More about classes Duck typing Interfaces Consistently designing multiple similar classes Using objects of multiple similar classes without explicitly knowing their types N: Duck Typing and Interfaces Week 5 Tu 2/5 Pushing out the boundaries even further: the web URLs HTTP GET requests Writing a Python program that downloads a web page given its URL N: URLs and HTTP W 2/6 Project #2 due 11:59pm Th 2/7 Why standards are so important on the Internet Why HTTP is for more than just web browsers Web APIs URLs with query parameters URL encoding (briefly) JSON (JavaScript Object Notation), and why it matters even if you're not writing JavaScript Using Python's standard library to access web APIs N: Web APIs Week 6 Tu 2/12 MIDTERM: regular lecture time and location Th 2/14 Test-driven development Unit tests as a way of improving one's design Refactoring (briefly) The unittest module in the Python standard library Objects, references, and id N: Test-Driven Development N: Two-Dimensional Lists Week 7 M 2/18 UNIVERSITY HOLIDAY: Presidents' Day — NO LABS TODAY Tu 2/19 Multidimensional data Multidimensional list algorithms When Python's standard library falls short Why we need third-party libraries Installing third-party libraries Virtual environments What libraries we might need if we want to implement games N: Two-Dimensional Lists N: Third-Party Libraries Th 2/21 Writing a visual game in Python Getting started with PyGame Displays and surfaces The game loop Events Colors Drawing and animation Clocks N: PyGame Basics F 2/22 Project #3 due 11:59pm Week 8 Tu 2/26 The "Spots" game, using PyGame Models and views Keeping model and view code separate Handling additional kinds of events Using modules and classes to improve our design The fractional coordinate system Two-way coordinate conversions N: The "Spots" Game Th 2/28 The "Spots" game (continued) N: The "Spots" Game Week 9 Tu 3/5 Augmenting our game with additional features Two ways of handling keyboard input Mixers and generating sound N: Inputs and Sounds W 3/6 Project #4 due 11:59pm Th 3/7 Graphical user interfaces The tkinter module in the Python standard library Event-based programming Creating a window and letting tkinter manage it Widgets Behaviors and events Buttons, commands, and event handler functions Bound methods in Python N: Tkinter Basics N: A Tkinter Application Week 10 Tu 3/12 The grid layout manager Model/view separation in a tkinter application Applying test-driven development to a "real" project Why model/view separation makes testing better N: A Tkinter Application N: Tkinter Layout Th 3/14 F 3/15 Project #5 due 11:59pm Finals Week Tu 3/19 FINAL EXAM: 7:00pm-9:00pm, PSLH 100