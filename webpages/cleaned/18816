18816
www.ics.uci.edu/~pattis/ICS-33/announcements.html
Announcements Announcements ICS-33: Intermediate Programming In reverse-chronological order #17: 2/25/19 Quiz #5 Graded I have run the automatic batch self-check tests for Quiz #5 and the TAs have checked most of the solutions for appropriateness: using appropriate recursion to solve each problem. I used the following batch self-check file (similar to the one I provided, but with some altered/additional tests). The grades are now recorded. See the assignment grades and Grades(zipped .xlsm file) files, whose details are discussed below, in Announcement #7. The class average was about 90% and the median was 100%, meaning that most students correctly solved most problems, and over half (60%) of the class correctly solved all the problems (or had minor deductions). Overall there were 60% As, 23% Bs, 7% Cs, and 10% Ds and Fs. About 42% of the students submitted early, and these early submitters scored much better (average of 95%) than students submitting on the due day (average of 88%); I am assuming that some students ran out of time before they finished all the problems, and will plan to get started earlier on later quizzes. In the assignment spreadsheet, Column A contains the Hashed IDs of all students (in sorted order) and Column B contains an X if we believe the student submitted work on time. Row 1 for Columns C-M shows how many points the problems were worth. Row 2 shows the number of tests performed for each problem Rows 4 and beyond show the number of failed tests for each student (a blank indicates no failed tests: equivalent to 0 failed tests). To compute the number of points for a problem/in a column, compute the percentage of successful tests and multiply it by the number of points the problem is worth. So for example, if a student missed 5 of 20 tests on a 4 point problem, he/she would receive 15/20*4 = 3 points. A -1 in colums I-M means that the student did not solve the problem according to the requirements (see the comment for more information). Columns N-P show each student's cumulative Score, the score Rounded to an integer (what integer is entered in the Grades spreadsheet) and Percent, based on the number of points the assginment is worth (here 25). Appropriateness of recursive functions were grade by the following staff: Problem #1: Lawrence Dang Problem #2: Richard Hsu Problem #3: Ivan Furlong Problem #4: Richard Hsu Problem #5: Kuixi Ren Some of the most common problems were Rebinding a local variable or a parameter (note += rebinds) Using for/while loop or manual iteration with iter/next Using comprehensions (which contain for loops) Trivializing solution by conversion/cast to dict Mutating a list/set/dict (via extend, remove, etc.) Not writing recursive code Hard coded value check Checking full strings for equality No code written In cases where students wrote solutions that produced the correct results for a problem, but violated the rules for using recursion on this quiz, they received -1 for the violation and only half the points for producing the correct results. Students should talk to/email the TA/Reader who graded a problem, if they do not understand why they received the appropriateness marks they did. The best time to talk with any TA/Reader about grades is during one of their Labs, when both student and TA are physically present to examine the submission and the grade, possibly running the solution on a computer they can share. Read my solution first as well. Students should examine their graded work immediately and get any regrade issues settled as soon as possible (within a week of when the grade is assigned). IMPORTANT Information about Student Grades A few students submitted code that had syntax errors and therefore failed all tests: the TAs are authorized to allow you to fix a few simple syntax errors in the code you submitted and rerun/regrade the code (but, I will deduct some points for not submitting executable code). Also see Announcement #5 below. A few students submitted code that didn't finish executing in at least one of their functions and therefore failed all its tests: the TAs are authorized to allow you to replace any method body with pass and rerun/regrade the code (but, I will deduct some points for submitting code with an infinite loop). The purpose of the assignment was to improve your ability to write recursive functions correctly, according to the constraints of functional programming. All these topics may appear on the Final exam. As with all assignments, you should examine my solutions. #16: 5//16/19 Program #3 Graded I have run the automatic batch self-check tests for Program #3 and the grades are now recorded. See the assignment grades and Grades(zipped .xlsm file) files, whose details are discussed below, in Announcement #7. I used a different bsc test file for grading: one that defined a pnamedtuple('Quad1', 'x y z f'), having a different number of fields with different names not in alphabetical order. The class average was about 98% and the median was 106%, meaning that most students correctly solved most problems, and over half (91%) of the class correctly solved all the problems (or had minor deductions). Note that this problem had an extra credit part, as well as the standard extra credit for an early submission. Overall there were 93% As, 2% Bs, 1% Cs, and 3% Ds and Fs. About 54% of the students submitted early, and these early submitters scored better (average of 105%) than students submitting on the due day (average of 97%); I am assuming that some students ran out of time before they finished all the problems, and will plan to get started earlier on later program. In the assignment spreadsheet, Column A contains the Hashed IDs of all students (in sorted order); Column B contains an X if we believe the student submitted work on time (for pairs, only the submitting student will show an X, not their partner); Column C shows the extra credit points for early submissions (students submitting a few minutes late show -2; students submitting more than a few minutes late were not graded). Row 2 shows the number of points each group of batch-self checks is worth; row 3 shows the number of tests performed for each problem: all were batch-self check tests. Rows 4-5 shows further information about the tests performed in each column. Rows 6 and beyond show the number of failed tests for each student (a blank indicates no failed tests: equivalent to 0 failed tests). To compute the number of points for a problem/in a column, compute the percentage of successful tests and multiply it by the number of points the problem is worth. So for example, if a student missed 1 of 4 tests on a 4 point problem, he/she would receive 3/4*4 = 3 points. Column L shows each student's cumulative score, for all the tests in the single problem in this assignment. Columns M-O show each student's cumulative Score, the score Rounded to an integer (what integer is entered in the Grades spreadsheet) and Percent, based on the number of points the assginment is worth (here 50). Note that these columns are filled in both for submitters and their partners (these are the only columns filled in for partners): a partner should see his/her submitter's line for details. Students should talk to the TA/Reader for their Lab first, if they do not understand why they received the marks they did or dispute any of these marks. The best time to talk with your TA/Reader about grades is during one of your Labs, when both student and TA/Reader are physically present to examine the submission and the grade, possibly running the solution on a computer they can share. Students should examine their graded work immediately and get any regrade issues settled as soon as possible (within a week of when the grade is assigned). IMPORTANT Information about Student Grades A few students submitted code that had syntax errors and therefore failed all tests: the TAs/Readers are authorized to allow you to fix a few simple syntax errors in the code you submitted and rerun/regrade the code (but, I will deduct some points for not submitting executable code). Also see Announcement #5 below. A few students submitted code that didn't finish executing in some part and therefore failed all that part's tests: the TAs/Readers are authorized to allow you to replace any method body with pass and rerun/regrade the code (but I will deduct some points for submitting code with an infinite loop). A few students submitted code that (a) incorrectly named partners -wrong format or wrong UCInetID, or (b) had students listed a partners of multiple submitters, or (c) had both students submitting and listed as partners of submitters. The TAs/Readers are authorized to try to understand these problems and help me correct them (but, I will deduct some points for dealing with these problems). This assignment was designed to illustrate the richness of ways to solve programming problems: writing a program that automatically writes a class, given the required information to specify it (class name and fields). It also provided an opportunity to improve your string-processing abilities. As with all assignments, you should examine my solution. #15: 5/12/19 Midterm Graded The staff and I have graded and recorded the scores for the midterm exam. The staff will distribute the graded midterms in their labs this week. If you do not pick up your exam then, you will have to come to my office hours to retrieve it (and I would prefer not to have hundreds of exams stockpiled in my office). See the assignment grades and Grades(zipped .xlsm file) files. If you took the exam but do not show a score, please contact me ASAP. Sometimes the TAs enter a score on the wrong line (the scores are hand-entered), but since we have the original exams that problem is easy to rectify. The class average was about 63% and the median was 65% (last Winter they were 63% and 63%). Because the average was below 75%, about 15 normalization points (12%) will be added when computing the average of all graded instruments on the spreadsheet. The grades recorded in the spreadsheet (both in Columns R and S) are the actual exam grades (without normalization points; see cell R8, highlighted in yellow, for the number of normalization points that will boost your score). After normalizing the scores on the midterm, overall there were 12% As, 27% Bs, 28% Cs, 20% Ds, and 13% Fs (last Winter there were 18% As, 23% Bs, 24% Cs, 20% Ds, and 15% Fs; a close match, but shifted down with fewer As and more Bs and Cs). I will show some more detailed information about the exam in lecture on Monday. Here is a list of the averages for the various pages. Recall that although the exam had 125 points, 5 points were counted as extra credit, so the final averages were computed out of only 120 points. Problem 1: 69% Functions on Data Structures Problem 2: 63% Regular Expressions Problem 3: 76% Operator Overloading 1 Problem 4: 77% Operator Overloading 2 Problem 5: 56% Iterators/Generators Problem 6: 67% Recursion/Functional Programming Problem 7: 35% Attributes, Operators and FEEOP Problem 8: 41% Short Answer Now is a good time to look at course grades as well, as we have graded nearly half of the total number of testing instruments (450 of 1,000 points). Now is the first time that recorded grades are truly meaningful, because they include testing instruments in all the major categories: quizzes, programs, in-lab exams, and written exams. The approximate distribution of course grades (for those students who submitted a midterm exam) is 50% As, 26% Bs, 12% Cs, and 12% Ds and Fs: these numbers are better than my original prediction of of 25% in each of these four categories (e.g., we have 76% As and Bs instead of 50% As and Bs). Here is a list of who graded which problems. Problem(s) 1a : Kuixi Problem(s) 1bc: Me (Rich) Problem(s) 2 : Kuixi Problem(s) 3 : Ivan Problem(s) 4 : Richard Problem(s) 5 : Lawrence Problem(s) 6 : Seyyed Problem(s) 7 : Peeyush Problem(s) 8 : Talha I would like to thank the TAs/Readers for their efforts over the weekend. Each spent about 12 hours preparing to grade, grading their problems on about 300 exams, and then entering the grades for their labs of students. If you have any issues with how any exam problem was graded, talk to the staff member who graded it, and they can discuss the rubric with you and resolve any issues. But first, please examine my solution and understand the differences between it and your answer. Students should examine their graded work immediately and get any regrade issues settled as soon as possible (within a week of when the grade is assigned). Note: Because we examined code (unlike for the In-Lab exam) partially credit was awarded, but sometimes points were deducted not for correctness issues, but for stylistic issues: e.g., using extra data structures/loops, not using boolean values or unpacking appropriately, etc. This happened most frequently from problems 1 and 4. Imporant: As with the In-Lab Exams, if a student performs better on the Final Exam (since it is cumulative), I will increase their Midterm Exam score to be 75% of the Final + 25% of the midterm. Students showing a red cell in column AC-AD have a computed grade of C or above, but have not met the requirement that the average of either their In-Lab OR Written exams is at least 69.5%: these students could received a C- grade if one of these averages does not improve. I have investigated doing away with this requirement, by making the In-Lab and Written Exam worth more points, but that tends to lower the grades of all the students, so I prefer to leave in place the current system. Finally, the normalized average for the 8am labs was 74%, the 10am labs was 77%, and the 12noon labs was 74%. The highest scoring lab scored 78% (three scored this: at 8am and 12noon) and the lowest scoring lab scored 71%. #14: 5/3/19 Quiz #4 Graded I have run the automatic batch self-check tests for Quiz #4 and the grades are now recorded. I used the following batch self-check file (similar to the one I provided, but with some altered/additional tests). See the assignment grades and Grades(zipped .xlsm file) files, whose details are discussed below, in Announcement #7. The class average was about 81% and the median was 100%, meaning that most students correctly solved most problems, and over half (75%) of the class correctly solved all the problems (or had minor deductions). Overall there were 75% As, 6% Bs, 1% Cs, and 18% Ds and Fs. There were a huge (compared to previous quarters) number of student who scored 0 because their code timed-out on one of the problems; see the information below about rectifying this issue. About 21 of the students submitted early, and these early submitters scored much better (100% average) than students submitting on the due day (76%); I am assuming that some students ran out of time before they finished all the problems, and will plan to get started earlier on later quizzes. In the assignment spreadsheet, Column A contains the Hashed IDs of all students (in sorted order) and Column B contains an X if we believe the student submitted work on time. Row 1 for Columns C-J shows how many points the problems were worth. Row 2 shows the number of tests performed for each problem. Row 3 shows the part of the problems in more detail. Rows 4 and beyond show the number of failed tests for each student (a blank indicates no failed tests: equivalent to 0 failed tests). To compute the number of points for a problem/in a column, compute the percentage of successful tests and multiply it by the number of points the problem is worth. So for example, if a student missed 5 of 20 tests on a 4 point problem, he/she would receive 15/20*4 = 3 points. Columns K-L show the cumulative score for each Problem. Columns M-O show each student's cumulative Score, the score Rounded to an integer (what integer is entered in the Grades spreadsheet) and Percent, based on the number of points the assginment is worth (here 25). Students should talk to the TA/Reader for their Lab first, if they do not understand why they received the marks they did or dispute any of these marks. The best time to talk with your TA/Reader about grades is during one of your Labs, when both student and TA/Reader are physically present to examine the submission and the grade, possibly running the solution on a computer they can share. Students should examine their graded work immediately and get any regrade issues settled as soon as possible (within a week of when the grade is assigned). IMPORTANT Information about Student Grades A few students submitted code that had syntax errors and therefore failed all tests: the TAs/Readers are authorized to allow you to fix a few simple syntax errors in the code you submitted and rerun/regrade the code (but, I will deduct some points for not submitting executable code). Also see Announcement #5 below. A few students submitted code that didn't finish executing in at least one of their functions and therefore failed all its tests: the TAs/Readers are authorized to allow you to replace any method body with pass and rerun/regrade the code (but, I will deduct some points for submitting code with an infinite loop). I believe most of the problems were with extra tests I performed on the drop_last generator. This assignment was designed to provide you with a good grounding in the use of iterators and generators (which can be used to implement iterators), and how to write code that uses iter and next directly (using while loop instead of for loop). All these topics will be tested again on the Midterm and In-Lab Exam #2. As with all assignments, you should examine my solutions. #13: 5/2/19 Program #2 Graded I have run the automatic batch self-check tests for Program #2 and the grades are now recorded. I used the following batch self-check files (similar to the ones I provided, but with some altered/additional tests). See the assignment grades and Grades(zipped .xlsm file) files, whose details are discussed below, in Announcement #7. The class average was about 88% and the median was 90%, meaning that most students correctly solved most problems, and over half (58%) of the class correctly solved all the problems (or had minor deductions). Overall there were 58% As, 23% Bs, 12% Cs, and 7% Ds and Fs. About 61% of the students submitted early, and these early submitters scored much better (93% average) than students submitting on the due day (83% average); I am assuming that some students ran out of time before they finished all the problems, and will plan to get started earlier on later programs. Note: The second problem, the Rational class, was worth 30 of the 50 total points for this assignment. Of these these 30 points, 15 were allocated to correctly dealing with rational numbers with very large integers: doing so is the whole point of developing the Rational class. So, students who could not debug their code to operate on such large-integer rationals lost many points. See column AB in the spreadsheet and the 6 tests it specifes in the bsc file. In the assignment spreadsheet, Column A contains the Hashed IDs of all students (in sorted order); Column B contains an X if we believe the student submitted work on time (for pairs, only the submitting student will show an X, not their partner); Column C shows the extra credit points for early submissions. Row 2 for Columns D-AD shows how many points the problems were worth. Row 3 shows the number of tests performed for each problem: all were batch-self check tests. Row 4 shows further information about the tests performed in each column. Rows 5 and beyond show the number of failed tests for each student (a blank indicates no failed tests: equivalent to 0 failed tests). To compute the number of points for a problem/in a column, compute the percentage of successful tests and multiply it by the number of points the problem is worth. So for example, if a student missed 1 of 4 tests on a 4 point problem, he/she would receive 3/4*4 = 3 points. Columns AE-AF show each student's cumulative score, for all the tests in each of the two problems in this assignment. Columns AG-AI show each student's cumulative Score, the score Rounded to an integer (what integer is entered in the Grades spreadsheet) and Percent, based on the number of points the assginment is worth (here 50). Note that these columns are filled in both for submitters and their partners (these are the only columns filled in for partners): a partner should see his/her submitter's line for details. Students should talk to the TA/Reader for their Lab first, if they do not understand why they received the marks they did or dispute any of these marks. The best time to talk with your TA/Reader about grades is during one of your Labs, when both student and TA/Reader are physically present to examine the submission and the grade, possibly running the solution on a computer they can share. Students should examine their graded work immediately and get any regrade issues settled as soon as possible (within a week of when the grade is assigned). IMPORTANT Information about Student Grades A few students submitted code that had syntax errors and therefore failed all tests: the TAs/Readers are authorized to allow you to fix a few simple syntax errors in the code you submitted and rerun/regrade the code (but, I will deduct some points for not submitting executable code). Also see Announcement #5 below. A few students submitted code that didn't finish executing in some part and therefore failed all that part's tests: the TAs/Readers are authorized to allow you to replace any method body with pass and rerun/regrade the code (but, I will deduct some points for submitting code with an infinite loop). A few students submitted code that (a) incorrectly named partners -wrong format or wrong UCInetID, or (b) had students listed a partners of multiple submitters, or (c) had both students submitting and listed as partners of submitters. The TAs/Readers are authorized to try to understand these problems and help me correct them (but, I will deduct some points for dealing with these problems). This assignment was designed to provide you with a good grounding in the use of classes and the practice of overloading operators in classes, including a bit of writing iterators. Quiz #4 covers decorators for iterators using generator functions in much more detail. All these topics will be tested again on the Midterm and In-Lab Exam #2. As with all assignments, you should examine my solutions. #12: 4/28/19 Quiz #3 Graded I have run the automatic batch self-check tests for Quiz #3 and the grades are now recorded. I used the following batch self-check files (similar to the ones I provided, but with some altered/additional tests). See the assignment grades and Grades(zipped .xlsm file) files, whose details are discussed below, in Announcement #7. The class average was about 94% and the median was 100%, meaning that most students correctly solved most problems, and well over half (79%) of the class correctly solved all the problems (or had minor deductions). Overall there were 79% As, 14% Bs, 1% Cs, and 6% Ds and Fs. About 31% of the students submitted early, and these early submitters scored better (98% average) than students submitting on the due day (92% average); I am assuming that some students ran out of time before they finished all the problems, and will plan to get started earlier on later quizzes. There was 1 student whose code timed-out when I graded it; I let the grading program run everyone's code for 10 seconds. If you code timed-out, talk to your TA/Reader about replacing the body of any offending code by just pass, so that it won't time-out, allowing all the other code to be graded. In the assignment spreadsheet, Column A contains the Hashed IDs of all students (in sorted order) and Column B contains an X if we believe the student submitted work on time. Row 1 for Columns C-N shows how many points the problems were worth. Row 2 shows the number of tests performed for each problem. Rows 4 and beyond show the number of failed tests for each student (a blank indicates no failed tests: equivalent to 0 failed tests). To compute the number of points for a problem/in a column, compute the percentage of successful tests and multiply it by the number of points the problem is worth. So for example, if a student missed 5 of 20 tests on a 4 point problem, he/she would receive 15/20*4 = 3 points. Columns O-P show the cumulative score for each Problem. Columns Q-S show each student's cumulative Score, the score Rounded to an integer (what integer is entered in the Grades spreadsheet) and Percent, based on the number of points the assginment is worth (here 25). Students should talk to the TA/Reader for their Lab first, if they do not understand why they received the marks they did or dispute any of these marks. The best time to talk with your TA/Reader about grades is during one of your Labs, when both student and TA/Reader are physically present to examine the submission and the grade, possibly running the solution on a computer they can share. Students should examine their graded work immediately and get any regrade issues settled as soon as possible (within a week of when the grade is assigned). IMPORTANT Information about Student Grades A few students submitted code that had syntax errors and therefore failed all tests: the TAs/Readers are authorized to allow you to fix a few simple syntax errors in the code you submitted and rerun/regrade the code (but, I will deduct some points for not submitting executable code). Also see Announcement #5 below. A few students submitted code that didn't finish executing in at least one of their functions and therefore failed all its tests: the TAs/Readers are authorized to allow you to replace any method body with pass and rerun/regrade the code (but, I will deduct some points for submitting code with an infinite loop or just code that took too long). This assignment was designed to provide you with a good grounding in the use of operator overloading in classes: this includes both standard arithmetic and relational operators, as well as other methods that Python calls automatically (e.g., __repr__, __str__, __getitem__, etc). All these topics will be tested again on the Midterm and In-Lab Exam #2. As with all assignments, you should examine my solutions. In the Time class, some students wrote operators that returned strings instead of Time objects; a few bsc tests fail in such cases, but many succeeded because e test calls the str function on the left argument; it is supposed to call str on a Time object, but if you return a string, it will call str on it, which returns the same string. #11: 4/25/19 In-Lab Programming Exam #1 Graded I have run the automatic batch self-check tests for In-Lab Exam #1 and the grades are now recorded. See the assignment grades and Grades(zipped .xlsm file) files, whose details are discussed below, in Announcement #7. You can find your solutions (by your Hashed ID), my solution, and the actual bsc and db files that I used to compute grades for this assignment, in the EEE dropbox for this class (see the name ile1materials.zip). To test your code with these new files, you should put them in your project file, comment out all the tests in the script in your code (the ones you ran during the exam), and then you should add and run the code 
    import driver
    driver.default_file_name = "bscile1S19.txt"
    driver.driver() I believe the In-Lab Exams are the best indicator, of all testing instruments, of your ability to program: read specifications and transform them into working code (writing code and debugging it). As I'll say in class, Tolstoy is often quoted (from Anna Karenina) as writing, "Happy families are all alike; every unhappy family is unhappy in its own way." My adaptation of this quote is "High-scoring students are all alike (knowing how to program well); every low-scoring student did poorly in his/her own way: e.g., lack of programming or debugging ability, freezing on the exam, misreading or misunderstanding some problem statements, spending too much time debugging one problem, being ill when taking the exam, arriving late, etc." So, I understand that there are many possible reasons that students don't do well on In-Lab Exams. If you did poorly, think about why; don't fool yourself. The spreadsheet computes grades the standard way: the percentage of tests passed for each function multiplied by 20 (each problem was worth 20 points), with all the points added up. Column I computes this number, which is also the same as the rounded value (Column J) and the percentage (Column K) The result was the class average was about 88% and the median was about 100%. The large skew between these statistics shows that although the majority of students solved most of the problems correctly, there were other students who did very poorly, which dragged down the average much more than the median. At the extremes, 78% of the students submitted code in which all five functions passed all batch self-check tests (half of those had the extra credit problem correct too); 2% submitted code in which no functions passed any batch self-check tests (although some of these are from code containing bad imports, syntax errors, and infinite loops: see below). The approximate distribution of grades on this In-Lab exam is 78% As, 5% Bs, 1% Cs, 4% Ds, and 12% Fs. This U-shaped distribution 90% As and Fs) is common for In-Lab Programming Exams, where we are testing competency/mastery of programming concepts: the ones who attained it scored As (could do everything in the allotted time); the ones who have not attained it scored Fs (solved just a few problems in the allotted time); only about 10% of the students scored somewhere in-between (and most of those scored Bs). There were 22 students (about 7%) who solved the extra credit problem. FYI, the averages for the different exam times were 86% for students in Lab 1-3 (meeting at 8am), 87% for students in Labs 4-6 (meeting at 10am), and 92% for students in Labs 7-8 (meeting at 12noon). Students should talk to the TA/Reader for their Lab first, if they do not understand why they received the marks they did or dispute any of these marks. The best time to talk with your TA/Reader about grades is during one of your Labs, when both student and TA are physically present to examine the submission and the grade, possibly running the solution on a computer they can share. Students should examine their graded work immediately and get any regrade issues settled as soon as possible (within a week of when the grade is assigned). IMPORTANT Information about Student Grades If you submitted code that had syntax errors and therefore failed all tests: the TAs are authorized to allow you to fix a few simple syntax errors in the code you submitted and rerun/regrade the code (but, I will deduct some points for not submitting executable code). You cannot "debug" the code beyond fixing syntax errors. Also see Announcement #5 below. If you submitted code that didn't finish executing in at least one of their functions and therefore failed all its tests: the TAs are authorized to allow you to replace any method body with pass and rerun/regrade the code (but, I will deduct some points for submitting code with an infinite loop). The actual batch self-check tests I used for grading were similar to the tests in the script of the exam; but, all produce differents results, so students could not "hard-code" any answers into their functions, hoping to get some correctness points. Often I just changed the zipcodes and party letters, which leads to different but equivalent output. Finally, if students score a higher percentage on their In-Lab Exam #2 (which involves material from the first, as well as Classes, Operator Overloading, and writing Iterators), I will score their In-Lab Exam #1 higher. In the past, I have sometimes made the first exam score equal to the second, effectively erasing the first score; more recently I have built a composite score that is 25% the first score and 75% the second. Therefore, even a terrible grade on this exam can have a minimal effect on your final grade if you perform much better on In-Lab Exam #2. #10: 4/22/19 Quiz #2 Graded I have run the automatic batch self-check tests for Quiz #2 and the grades are now recorded. I used the following batch self-check file (similar to the ones I provided, but with some altered/additional tests). See the assignment grades and Grades(zipped .xlsm file) files, whose details are discussed below, in Announcement #7. The class average was about 94% and the median was 100%, meaning that most students correctly solved most problems; about (85%) of the class correctly solved all the problems (or had minor deductions). Overall there were 85% As, 2% Bs, 6% Cs, and 5% Ds and Fs. About 51% of the students submitted early (more than normal because of the 1 day extension), and these early submitters scored a bit better (96% average) than students submitting on the due day (93% average); I am assuming that some students ran out of time before they finished all the problems, and will plan to get started earlier on later quizzes. In the assignment spreadsheet, Column A contains the Hashed IDs of all students (in sorted order) and Column B contains an X if we believe the student submitted work on time. Row 1 for Columns C-K shows how many points the problems were worth. Row 2 shows the number of tests performed for each problem. Rows 4 and beyond show the number of failed tests for each student (a blank indicates no failed tests: equivalent to 0 failed tests). To compute the number of points for a problem/in a column, compute the percentage of successful tests and multiply it by the number of points the problem is worth. So for example, if a student missed 5 of 20 tests on a 4 point problem, he/she would receive (20-5)/20*4 = 15/20*4 = 3 points. Columns L-N show each student's cumulative Score, the score Rounded to an integer (what integer is entered in the Grades spreadsheet) and Percent, based on the number of points the assginment is worth (here 25). Students should talk to the TA/Reader for their Lab first, if they do not understand why they received the marks they did or dispute any of these marks. The best time to talk with your TA/Reader about grades is during one of your Labs, when both student and TA/Reader are physically present to examine the submission and the grade, possibly running the solution on a computer they can share. Students should examine their graded work immediately and get any regrade issues settled as soon as possible (within a week of when the grade is assigned). IMPORTANT Information about Student Grades A few students submitted code that had syntax errors and therefore failed all tests for that part: the TAs are authorized to allow you to fix a few simple syntax errors in the code you submitted and rerun/regrade the code (but, I will deduct some points for not submitting executable code). You cannot "debug" the code beyond fixing syntax errors. Also see Announcement #5 below. A few students submitted code that didn't finish executing in at least one of their functions and therefore failed all its tests: the TAs are authorized to allow you to replace any method body with pass and rerun/regrade the code (but, I will deduct some points for submitting code with an infinite loop). This assignment was designed to provide you with a good grounding in the use of writing regular expressions and using the re module to write code that processes text using regular expression. All these topics will be tested again on the Midterm. As with all assignments, you should examine my solutions. #9: 4/19/19 Program #1 Graded I have run the automatic batch self-check tests for Program #1 and the grades are now recorded. I used the following batch self-check files (similar to the ones I provided with the assignment). See the assignment grades and Grades(zipped .xlsm file) files, whose details are discussed below, in Announcement #7. Note that columns AF-AK show information about the submissions for each student: what days submissions occurred (AF-AH), the total number of submissions (AI), how many submissions were graded and counted (AJ), and how many were not graded and not counted (AK). Of 243 students/pairs submitting, 19 (8%) had one or more submissions not counted; they submitted more than one on the due date, and/or more than two during the last two days. Only 5 (2%) had more than one submission not counted. Only 2 students submitted after 11:30pm: I removed that submission from being graded. and deducted 1 point (in Column C) for requiring manual work to correct for the late submissions. Please do not submit any work after the deadline. The class average was about 90% and the median was 100%, meaning that most students correctly solved most problems, and over half (71%) of the class correctly solved all the problems (or had minor deductions). Overall there were 71% As, 11% Bs, 5% Cs, and 13% Ds and Fs. FYI, last Spring quarter, there were 69% As, 9% Bs, 7% Cs, and 15% Ds and Fs About 50% of the students submitted early, and these early submitters scored about the same (97% average) than students submitting any programs on the due day (96% average). I am assuming that some students ran out of time before they finished all the problems, and will plan to get started earlier on later programs. In the assignment spreadsheet, Column A contains the Hashed IDs of all students (in sorted order); Column B contains an X if we believe the student submitted work on time (for pairs, only the submitting student will show an X, not their partner); Column C shows the extra credit points for early submissions (to get any extra credit points, you had to have all five submissions meet the submission-date critera). If column B or C has a red triangle, hover over it to read its message; sometimes you have to right-click the comment, then select "Edit Comment" to enlarge the comment box to read all of it. Row 2 for Columns D-V shows how many points the problems were worth. Row 3 shows the number of tests performed for each problem: all were batch-self check tests. Rows 4-5 show further information about the tests performed in each column. Rows 6 and beyond show the number of failed tests for each submission (a blank indicates no failed tests: equivalent to 0 failed tests). To compute the number of points for a problem/in a column, compute the percentage of successful tests and multiply it by the number of points the problem is worth. So for example, if a student failed 1 of 4 tests on a 5 point problem, he/she would receive (4-1)/4*5 = 3/4*5 = 3.75 points. Columns W-AA show each student's cumulative score, for all the tests in each of the problems in this assignment. Columns AB-AD show each student's cumulative Score, the score Rounded to an integer (what integer is entered in the Grades spreadsheet) and Percent, based on the number of points the assginment is worth (50). Note that these columns are filled in both for submitters and their partners (these are the only columns filled in for partners): a partner should refer to his/her submitter's line for grading details. Students should talk to the TA/Reader for their Lab first, if they do not understand why they received the marks they did or dispute any of these marks. The best time to talk with your TA/Reader about grades is during one of your Labs, when both student and TA/Reader are physically present to examine the submission and the grade, possibly running the solution on a computer they can share. Students should examine their graded work immediately and get any regrade issues settled as soon as possible (within a week of when the grade is assigned). IMPORTANT Information about Student Grades A few students submitted code that had syntax errors and therefore failed all tests for that part: the TAs/Readers are authorized to allow you to fix a few simple syntax errors in the code you submitted and rerun/regrade the code (but, I will deduct some points for not submitting executable code). You cannot "debug" the code beyond fixing syntax errors. Also see Announcement #5 below. A few students submitted code that didn't finish executing in their reachable (sometimes other) solutions and therefore failed all its tests: the TAs/Readers are authorized to allow you to replace any method body with pass (to avoid the infinite loop) and rerun/regrade the code. But, I will deduct some points for submitting code with an infinite loop: in the future, replace any method body with pass if it causes an infinite loop. Students who had this problem have a comment attached to their X in Column B. A few students submitted code that (a) incorrectly named partners -wrong format or wrong UCInetID, or (b) had students listed a partners of multiple submitters, or (c) had both students submitting and listed as partners of submitters. The TAs/Readers are authorized to try to understand these problems and help me correct them (but, I will deduct some points for staff having to deal with these problems manually). As always, see a TA/Reader first. This assignment was designed to provide you with a good grounding in the use of the standard data structures in Python: list, tuple, set, and especially dict (and the defaultdict variant). It also included practice iterating overs such structures, writing comprehensions, use of the sorted function and lambda, and other useful/important Python functions. Unlike Quiz #1, the problems were bigger, requiring more interesting algorithms to solve, but still all expressible with a small number of Python language features. All these topics will be tested again on the Midterm and In-Lab Exam #1. As with all assignments, you should examine my solutions. I hope the "tracing" requirements for some of the problems showed you how to instrument the code you write to aid in debugging: if you added the tracing code after your program was running correctly, you missed the point of this part of the assignment. #8: 4/14/19 Quiz #1 Graded I have run the automatic batch self-check tests for Quiz #1 (checking correctness) and the Readers/TAs have examined problem 1 and the code (checking requirements: e.g., 1 return statements/solution for 3a, 3b, 3c, and 3d) and the grades are now recorded and posted. I used the following batch self-check file. You should run your program on this file to understand your recorded grade. See the assignment grades and Grades(zipped .xlsm file) files, whose details are discussed below, in Announcement #7. The class average was about 81% and the median was 88%, meaning that most students correctly solved most problems (47% As), and 24% of the class correctly solved all the problems. Overall there were 47% As, 21% Bs, 10% Cs, and 22% Ds and Fs for those students who submitted work; most of the students who scored near 0 submitted code that we could not run (see the paragraphs below for possible regrading by your TA/Reader). FYI, the Fall quarter grades for this quiz were 63% As, 18% Bs, 7% Cs, and 12% Ds and Fs for those students who submitted work. About 19% of the students submitted early (although there are no extra credit points on quizzes for doing so; last fall it was 35%), and these early submitters scored much better than students submitting on the due day (91% compared to 79%): a difference of 1 full grade. I am assuming that some students ran out of time before they finished all the problems, and will plan to get started earlier on later quizzes. In the assignment grades spreadsheet, Column A contains the ID Hashed of all students (in sorted order) and Column B contains an X if we believe the student submitted work on time. Column C shows deductions for... written work submitted late (written work is due at the start of class) not printing a copy of quiz page on which you wrote your answer Row 1 for Columns D-O shows how many points the problems were worth. Some problems show points in two columns: e.g., Problem #3a has 2 points in Column G (3a/C: produced correct answers, graded by the batch self-checks) and 1 point in Column K (3a/R: the requirement of 1 return statement, graded by the staff). Any /C column relates to correctness; any /R relates to requirements. Note that you did not receive a requirement point unless you also received full correctness points, regardless of what it says in a requirement column. Row 2 shows the number of batch self-check tests performed for each problem (for those checked automatically; for the other columns it is just the number of points the problem is worth). Rows 4 and beyond show the number of failed tests for each student (a blank indicates no failed tests: equivalent to 0 failed tests). IMPORTANT: To compute the number of points you scored for a problem/in a column, compute the percentage of successful tests and multiply it by the number of points the problem is worth. So for example, if a student missed 2 of 6 tests on a 5 point problem, he/she would receive (6-2)/6 * 5 = 3.3333... points. Columns P-R show each student's cumulative Score, the score Rounded to an integer (that integer is the score entered in the Grades spreadsheet) and Percent, based on the number of points the assginment is worth (here 25). The TAS/Readers will distribute the pages with your solutions to Problem #1 in labs this week only; after that, your papers will be archived in my office. The rubric for this problem was as follows: each part wrog was a .5 pt deduction. .5 pt ALL names are written in module and have (square) boxes written underneath them .5 pt ALL arrows point from "namey things" to "objecty things" AND the TAIL of ALL arrows are INSIDE the box. Wrong if box has an arrow pointing to another box (name pointing to name) .5 pt ALL "objecty things" appear as circles, ovals, or rounded corner rectangles .5 pt ALL "objecty things" are correctly labeled by their type: int, or list AND have some indication of their value inside .5 pt module.a points to int/1 and it name, box, and arrow are crossed out (AND the the int/1 object is NOT crrosse out) .5 pt module.b has an arrow to int/2 (no crossouts of either) .5 pt module.c has an arrow to listy-thing .5 pt ONE listy-thing[0] has a crossed out arrow to same int/2 object module.b has an arrow to, and listy-thing [1] has an arrow to same int/1 that module.a "used to" have an arrow to (and no cross out) Note: the listy-thing can have 0/1 indexes label its arrows or not; no point deduction for either .5 pt ONE listy-thing[0] has an arrow to itself that is crossed out .5 pt ONE listy thing[0] has arrow to int/3 .5 pt no crossing arrows (see my solution). All lines must have their tailes in the boxes and their heads "touching" the oval of the object. If you lost any points on this problem (most students did) I suggest that you start by comparing your solution to mine using this rubric. Reader Richard Hsu graded all paper submissions. Students should talk to him if they do not understand why they received the marks they did or to dispute any of these marks. Students should examine their graded work immediately and get any regrade issues settled as soon as possible (within a week of when the grade is assigned). Show up to lab and settle these issues immediately. IMPORTANT Information about Student Grades A few students submitted code that extraneous imports or had syntax errors and therefore failed all tests: the TAs are authorized to allow you to fix a few simple syntax errors in the code you submitted and rerun/regrade the code (but, I will deduct some points for submitting unexecutable code). You cannot "debug" the code beyond fixing syntax errors. Also see Announcement #5 below. If you submitted an assignment, but the X in column B has the comment TIMEOUT it means that one of your functions contained an infinite loop, and therefore failed all tests: the TAs are authorized to allow you to replace the body of any function by pass (so you will receive 0 points for that function) and rerun/regrade the rest of the code (but, I will deduct some points for not submitting gradable code). Also see Announcement #5 below. This assignment was designed to provide you with a good grounding in the use of the standard data structures in Python: list, tuple, set, and dict (and the defaultdict variant). It also included practice iterating over such structures, writing comprehensions, and use of the sorted function and lambdas. All these topics will be tested again on the Midterm and In-Lab Exam #1 (along with appearing in Programming Assignment #1 as well). As with all assignments, you should examine my solutions. #7: 4/6/19 Programming Assignment #0 Graded The TAs/Readers have graded (and I have recorded the grades for) Programming Assignment #0. As with most assignments, there are two files that you should download, unzip, and examine to understand your performance on this assignment, and your cumulative performance in this class. Learn to download, unzip, and read these files. Both of these files are sorted by Hashed IDs (which are computed from the 8-digit UCI IDs of all the students in the class). To determine your Hashed ID, see Message #6 below. The first file to examine stores the assignment grades, a zipped Excel file that details how each student was graded on this instrument: what marks were given and why. It is sorted by Hashed IDs (column A). Column B contains an X if the student submitted work (later, if you work in pairs, the X will appear only on the Submitter's cell, not in the Partner's cell, although both will receive the same grade). Column C (for Programming Assignments only) shows extra credit points for early submission: 1 point for submitting 24 hours early; 2 points for submitting 48 hours (or more) early; a blank here means no extra credit/early submission points. Columns D and beyond show marks for the various parts of the assignment. The last three columns show your Score, the score Rounded to an integer (see the discussion below) and your Percent, based on the number of points the assginment is worth. If a cell contains a comment (those cells with a red-triangle in their upper-right hand corner) you can hover over the cell and you will see the comment that explains why the marks were given: sometimes you must right-click the comment and then enlarge its bounding box to see the full comment. Students should talk to the TA/Reader who graded a question, if they do not understand why they received the marks they did or to dispute any of these marks. For Programming Assignment #0, the grading was as follows 
Part A: Peeyush Gupta, Lawrence Dang
Part B: Ivan Furlong, Ahmad Razavi
Part C: Richard Hsu
Part D: Talha Khan, Kiuxi Ren
 The best time to talk with the TA/Readers about grades is during one of their Labs, when both student and staff are physically present to examine the submission and the grade, possibly running the solution on a computer they can share. The same goes for talking to other TAs/Readers. All the TAs/Readers can download your work from Checkmate. The second file to examine stores the cumulative Grades(zipped .xlsm file) -also available as a link on course web- unzip it, and then click the tab labeled Spring 2019. This tab records all the grades for all the testing instruments that you submit during the quarter. It is also sorted by Hashed IDs (column A). You will notice that in this spreadsheet all recorded grades are rounded up to integers: so receiving a 27.5 on the first spreadsheet will translate into a 28 recorded on the second one. We will use this same "round-up" process for recording all grades during the quarter. On this spreadsheet, columns B-T contain your scores: for the Quizzes (B-I), Programming Assignments (J-O), In-Lab Programming Exams (P-Q), and Written Exams (R and T: I'll discuss S after the Midterm). Columns U-X contain the sums for all these testing instruments. Column Y contains special extra credit points (for example, submitting the faculty/course evaluation at the end of the quarter; more on this then). Column Z-AD contains your cumulative points without nomalization points (Z), your average with normalization pints (AA), your rank in class (AB: 1 means highest-scoring student), and your current grade (AC is the letter, AD is +/- if appropriate). You should check this spreadsheet after every assignment is graded to ensure that your score was recorded correctly. Again, students should talk to the TAs/Readers first, if this spreadsheet contains any errors. IMPORTANT: Scores wil revert to 0, if I do not receive a signed Academic Integrity Contract from you (we are tabulating them this week). Please come by during my office hours as soon as possible if you need to fix this problem. If you turned in a document that was NOT printed double sided on a single sheet of paper, it will NOT be counted: get a new sheet outside my office and resubmit it to me in my office (or just slide it under the door). We need to scan these documents, and anything other than a single sheet of paper cannot be scanned (and might break the scanning machine). This assignment was designed to test you on whether you have mastered the basics of using Python in Eclipse, the Eclipse Debugger perspective, and batch-self-check files in the driver.py module (in courselib). It was also designed to see if you could follow instructions and ask questions: more on that below. The class average was 29 (or about 97%) and the median was 30 (or about 100%). For those students submtting work, there were 87% As, 8% Bs, 2% Cs, and 3% Ds and Fs. The assignment was not meant to be hard, but it was not trivial either, and there were many opportunities to lose points (and learn from your mistakes). Your work in the Eclipse/Python Integrated Developement Environment (IDE) throughout the quarter will leverage off the understanding and skills that you acquired in this assignment. Let me talk about what will probably be the most contentious single point of the 1,000 points that this course is worth (thus .1% of the grade). I took off 1 point if you corrected the misspelling Inteprxter (and took off 2 points if you didn't have either spelling: in this second case you obviously failed to meet the specifications because you did not print what was required). When some students hear about this point deduction, their heads explode and they cannot believe that I am taking off a point for correcting what you thought was my mistake. But... I am trying to foster an atmosphere where nothing is taken for granted in the instructions that I give: if anything seems confusing or plain wrong, I should be questioned about it -preferably in public, in the appropriate Piazza folder- so others can learn if there really is a problem, and if so the correction. Some students did ask me outside of class if they should correct the misspelling, and I told them "no"; some students asked me by email if they should correct the misspelling, and I told them "no"; one student asked in Piazza folder whether they should have corrected the misspelling, and I posted a reply saying that they shouldn't, for all students in the class to see. It is critical for programmers to be sure they know the specifications of the problem they are being asked to solve, otherwise they will solve, test, debug document, etc. the problem incorrectly, and another cycle of development will be needed to fix the misconceptions. The overview lecture included a graph that showed that the later in development a problem is found, the harder/more expensive it is to fix. So if we can find problems at the time we are reading the specification of the problem to solve, that can save us a lot of work/money later. n The bottom line is that you are responsible for reading the instructions carefully and reporting any confusion so that I can clear it up (best reported in the appropriate Piaza folder). Of course, you can freely talk to anyone about the problem specifications, just not the code that you write for your solutions. If you make any assumptions (like the node names in Programming Assignment #1 always being one letter long -that is not part of the specification), they might come back later to haunt you (gradewise). When working with a partner, you'll have two pairs of eyes reading the specifications and looking for issues. I am willing to deduct this one painful point at the start of the quarter, from many students, to get across this perspective, and save everyone grading grief during the quarter. I hope you submitted early so the extra credit erased this point loss (see below for the statistics on early submission). I will never intentionally do anything like this on subsequent assignments; but I can certainly be unclear about the specifications (which have lots of details) or even contradict myself from one spot to the next in a specification. It it up to you (the hundreds of eyes looking at my specifications) to clear up the confusion, and best to do it on Piazza, so I can clear up the problem once for all students. We deducted 1 point on the demo.py program if your # Submitter line did not perfectly match what was required, including using correct spacing, punctuation, lower-/upper-case letters, etc. Many students lost a point here; ensure that you know what you did wrong so you won't lose points in subsequent submissions. I'd like to clear up all problems related to this issue immediately. Most deductions came from not using the correct special characters, not using correct spacing, not using the correct "case" for letters, not writing your UCInetID (instead writing your Student ID). If you have a non-standard name and you think it was automatically graded wrong, contact the TAs/Readers who graded this part with your argument. Also, some students did not carefully read the instructions in the Debugger Perspective document for the quiz part, which required them to change a line in the craps script before running it with the debugger to gather the required information. With this change in your program, we can check your answers for correctness; without it, we cannot check you answers for correctness. Finally, about 63% of the students submitted the program 2 or more days early; about 19% submitted the program 1 day early. So, about 82% of the students submitted this assignment early. Keep up the good work, although it will be harder in upcoming assignments. You can earn 12 extra points if you turn in every Programming Assignment two or more days early (upping your grade by 1.2%): for some students, this boost will be enough to raise their final grade. Over the course of a two week assignment, it will be to everyone's benefit -students and staff alike- if students try to finish and submit early. IMPORTANT If you believe that we graded your work incorrectly, please examine the files mentioned above first, then contact the TA/Reader who graded your work, to discuss the issues with him/her. Such a discussion can have only positive outcomes: either he/she will agree with you that you deserve more credit (and, we do want you to receive all the credit that you are due), or you will come to understand the question, program, or solution better and realize why you lost points. This is certainly a win-win situation. Please read my solution and the assignment grades spreadsheet carefully before contacting a TA/Reader; ensure that you understand what is the correct answer and what points were deducted from your assignment and why. If there is a problem, the TA/Reader will email me a revised summary about your program, and cc a copy to you. I will update the grades spreadsheet as appropriate (it might take a bit of time for all these events to cumulate in a changed grade) and email you what I did. If you feel there is still an unresolved problem after talking to a TA/Reader, please contact me (but always contact your TA/Reader first). IMPORTANT: Also, because of the size of this class, if you have a grading issue, we will consider it only if you bring it to your TAs attention within a week of when I return the materials. This policy is in place to avoid an avalanche of work because of "grade-grubbing" late in the quarter. #6: 3/28/19 Hashed ID When we grade assignments, we often distribute/update various spreadsheets with the relevant grading information. These spreadsheets are indexed and sorted by each student's Hashed ID. The course web-page has a Find ID Hashed (grade key) link (the leftmost bottom/green link on the course web page) , which you can use to retrieve your Hashed ID (or click Find ID Hashed). Use the result it shows when examining any spreadsheets of grades; I suggest that you find this number once, and write it down for future reference. If you are an ACCESS student, this link may not work for you; in this case email me when you submit your first graded work. #5: 3/28/19 Important: Submitting Code without Losing Points ICS-33 uses software that automatically checks the correctnes of code in most quizzes and programming assignments; it uses (self-checking) test cases that we supply with the assignments that we distribute (sometimes slight variants). You will learn about these tools in Programming Assignment #0. Here are a few hints to ensure that you will understand the grading process better and minimize your point loss. Ensure that you submit the code you wrote, not empty files, nor the original files that you downloaded. Be very careful and double-check what you submit to avoid this mistake: if you are not sure that you submitted the correct code, resubmit it. After submitting (the correct file) to Checkmate, ensure that it shows the assignment's status as completely submitted. Bottom Line: If you do not submit code with your solution (e.g., you submit the wrong file), you will receive 0 points for the assignment. If you are submitting with a partner, ensure that the Submitter and Partner lines of the program are correctly specified. The names must appear in the exact format required, with no misspellings nor punctuation errors. The student listed as Submitter must be the one who actually submits the code. See the Programming Assignments web page for the exact form required (and you must follow that exact form, with no misspelling nor punctuation errors). Ensure that you submit your code on time. We can, and mostly do, ignore any work submitted after the deadline (even by a few minutes). It is a fairness issue for other students who do submit on time. The best strategy is to finish the work and submit it well before the deadline (possibly getting extra credit points): by submitting early, you will learn more too, if you aren't rushing to meet a deadline. To ensure that we will grade something, submit partially complete code ahead of the deadline; then, if you miss the deadline, we will still grade the partially complete code. Be warned: Checkmate can get bogged down if many students all try to submit a few minutes before the due time, so do not wait until the last minute to submit your code. Submit your code immediately when you finish; you can always remove a submission and resubmit corrected code later Ensure that you test your code using the self-checks that we provide and use for grading. By using these self-checks, you will know when your code contains errors that will result in point deductions when we grade it. The actual tests that we will use for grading might be a bit different, but will be similar in form and content: so, think a bit about testing your code beyond the self-checks that we supply. No finite amount of testing can show that code is correct for all inputs. Ensure that your files... ...contain no syntax errors. ...contain only appropriate import statements, typically just the ones provided in the download file(s); if Eclipse adds extra imports (which it sometimes does erroneosly) remove them. ...contain only functions that execute quickly (typically under a few seconds - unless specified otherwise in the assignment). Any syntax errors, inappropriate import statements, or excessive execution time may cause all self-check tests to fail during automatic grading. For functions that take excessive time, it is best to comment out their bodies, replacing their code with pass, resulting in the function immediately returning None: it will be counted wrong, but doing so will allow other functions to be run and graded for correctness. To help avoid inappropriate imports and losing points, ensure that in Python you have selected Window | Preferences | PyDev | Editor | Auto Imports and unchecked all boxes (illustrated below) and then clicked Apply following by OK. After an assignment is graded automatically, the Announcement for it will contain a link to an Excel file that you can examine for detailed information about how your score was computed. If this information does not match your expectations from you running the assignment's self-checks while developing your code, contact your TA. It is best to meet with your TA during lab hours: he/she can talk to you about your code and run it while you are present, to help resolve the difference. But, if we have to modify your code to grade it properly (see the typical source of problems above), then we will deduct points. I hope that by students carefully writing/submitting their code, these grading anomalies and point deductions will be minimized during the quarter. #4: 3/28/19 Communication There are many ways to communicate with me (and other staff and students). Here is a quick overview. Instructor Email: If you send email to me, please do it through your UCI email address. Include a well-thought Subject line. Also, please include your full name and the course (ICS-33). I teach many hundreds of students each quarter, often in multiple courses. Providing this information helps me quickly determine the context of your email, so I can better answer it. Finally, when I respond to your email, please do not send a "Thank you" acknowledgement. Such niceties are not necessary for work-related email. For me, it just increases the number of emails that I must read. Note that for questions that are not specific to you -questions that are relevant to the entire class- it is best to ask them in the appropriate Piazza Message Folders. Piazza Message Folders: Post in the Folder most closely related to your question (and check there first, before posting, to see if another student has already asked that -or a similar- question). Include a well-thought Summary line that clearly identifies the context and issue you are asking about; doing so helps me, my staff, and other students who are deciding whether to read your message and how to respond to it. If you discover the solution to your own question, revisit the posting and explain (without supplying code) any useful information that you learned that might help other students with the same problem. Avoid a post that says just, "Never mind: I figured it out myself."; try to supply some useful information about your solution. Course Email (ics33-S19@classes.uci.edu): Mostly this is for me to use to communicate with all the students in the class (all course email is archived on EEE). But, there are instances (very rarely) for students to use it: the best example is that if Checkmate appears to be unavailable. Sending a Checkmate down email to this address tells me that it is unavailable, and tells all the other students that (a) it is unavailable and (b) I have been informed that it is unavailable. FYI, we rehosted Checkmate on a new computer a few years ago, and it is now much more reliable and rarely unavailable. #3: 3/28/19 First/Later Labs I expect students to attend all their scheduled labs (unless they have already finished the current programming assignment). Programming Assignment #0 is assigned before the first lab of the quarter; so if you have not already finished it, I expect you to attend your first lab and work on it there. Generally, you can get invaluable help in lab from the TAs and Tutors relating to understaing the specifications of the assignment understanding Python language features understanding how to deubg your Python code Learning how to ask technical questions and interpret answers is an important skill that you can acquire/practice during your labs with TAs and Tutors. For debugging, don't expect the staff to debug your code for you. Instead expect, them to help you learn how to debug code in general, using your current problem/code as a concrete example. TAs/tutors will model the debugging process for you, so that you can follow it by yourself for subsequent bugs. One goal of ICS-33 is to make students much more independent programmers and debuggers: you should improve you debugging skills throughout the quarter. #2: 3/28/19 Install Course Software All students with computers should download and install the course Software: Java (to run Eclipse), Python, and Eclipse. All three products are available for free on the internet. Students can view instructions for downloading and installing this software by following the Course Software link. If you are using a Mac there are special instructions for you (e.g., Java is already installed) If you have installed a version of Python prior to 3.7, you should install the current version of Python (3.7 or later). If you have installed a version of Eclipse prior to Oxygen, you should install the current version of Eclipse (Photon or later). My instructions show installation of the latest versions available during Summer of 2018, so you will likely follow similar but not identical instructions. Although students can work on their programming assignments on the computers in the UCI labs, I expect students with computers to download and install this software by the end of the first week of the quarter. If you are having difficulty with this task, the TAs and Lab Tutors will help you during the first Lab meeting (or beyond, if necessary: bring your computer to the lab). If you have successfully downloaded and installed this software, please help other students do so too. Finally, you can also use the Piazza Message Folders to ask questions about installing this software and help other students install it. Installing software is sometimes confusing, but it is a one-time event: do it now; use it for the entire quarter. I strongly suggest that you BACKUP YOUR WORK daily: computers can malfunction, break, or be stolen. Every quarter I hear from a few students who have lost their work because they didn't backup their work; get into the backup habit now. I backup all my ICS-33 materials every day by zipping a folder that has all my ICS-33 materials and putting it on a USB memory stick. #1: 3/28/19 First Message Welcome to ICS-33. I am going to post and archive important messages about the class in this announcements web page: each entry will be numbered, dated, and labeled. The entries will appear in reverse chronological order. Whenever you follow the link to this page, scan its top for new announcements; scan downward for older announcements. This message will always appear at the bottom of this file. I will never remove a message from this page I have already posted some important messages before the start of the quarter. Expect a few new messages to be posted here each week, mostly regarding understanding returned and graded work. Check this Announcements page, along with your email, and Piazza Folders daily.